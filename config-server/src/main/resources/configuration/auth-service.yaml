spring:
  servlet:
    multipart:
      max-file-size: 50MB
  datasource:
    # URL of the PostgreSQL database
    url: jdbc:postgresql://localhost:5432/authenticationservicedb
    # Username for the database connection
    username: postgres
    # Password for the database connection
    password: postgres
    # Driver class name for PostgreSQL
    driver-class-name: org.postgresql.Driver
  jpa:
    hibernate:
      ddl-auto: update
    # Type of database
    database: postgresql
    # Hibernate dialect for PostgreSQL
    database-platform: org.hibernate.dialect.PostgreSQLDialect
  kafka:
    producer:
      bootstrap-servers: localhost:9092
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      properties:
        #since we want to serialize a json object, the producer needs to inform the consumer of our topic
        #what is the object that we are sending so here we are sending an object of type orderConfirmation
        spring.json.type.mapping: userDTO:org.example.authservice.kafka.producer.UserDTO , event:org.example.authservice.kafka.producer.UserEvent , message:org.example.authservice.kafka.producer.AuthenticationMessage
    consumer:
      bootstrap-servers: localhost:9092
      group-id: authGroup
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: '*'
        #since we want to serialize a json object, the producer needs to inform the consumer of our topic
        #what is the object that we are sending so here we are sending an object of type orderConfirmation
        spring.json.type.mapping: userUpdateDto:org.example.authservice.kafka.consumer.UserUpdateDto,userDeleteDto:org.example.authservice.kafka.consumer.UserDeleteDto

  mail:
    host: localhost
    port: 1025
    username: admin
    password: admin
    properties:
      mail:
        smtp:
          trust: "*"
        auth: true
        starttls:
          enable: true
        connectiontimeout: 5000
        timeout: 3000
        writetimeout: 5000

application:
  security:
    jwt:
      secret-key: 404E635266556A586E3272357538782D413D4428472B4B6250645367566B970
      expiration: 86400000 # 1 day
  mailing:
    frontend:
      activation-url: http://localhost:4200/activate-account
      resetPasswordUrl: http://localhost:4200/reset-password
springdoc:
  default-produces-media-type: application/json

server:
  servlet:
    context-path: /api/v1
  port: 8089