spring:
  datasource:
    # URL of the PostgreSQL database
    url: jdbc:postgresql://localhost:5432/postservicedb
    # Username for the database connection
    username: postgres
    # Password for the database connection
    password: postgres
    # Driver class name for PostgreSQL
    driver-class-name: org.postgresql.Driver
  jpa:
    hibernate:
      ddl-auto: create
    # Type of database
    database: postgresql
    # Hibernate dialect for PostgreSQL
    database-platform: org.hibernate.dialect.PostgreSQLDialect
  kafka:
    #    producer:
    #      bootstrap-servers: localhost:9092
    #      key-serializer: org.apache.kafka.common.serialization.StringSerializer
    #      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
    #      properties:
    #        #since we want to serialize a json object, the producer needs to inform the consumer of our topic
    #        #what is the object that we are sending so here we are sending an object of type orderConfirmation
    #        spring.json.type.mapping: userDTO:org.example.authservice.kafka.producer.UserDTO , event:org.example.authservice.kafka.producer.UserEvent
    consumer:
      bootstrap-servers: localhost:9092
      group-id: commentGroup
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: '*'
        #since we want to serialize a json object, the producer needs to inform the consumer of our topic
        #what is the object that we are sending so here we are sending an object of type orderConfirmation
        spring.json.type.mapping: commentEvent:org.example.postservice.kafka.consumer.CommentEvent, likeEvent:org.example.postservice.kafka.consumer.LikeEvent
server:
  servlet:
    context-path: /api/v1
  port: 8083
application:
  file:
    uploads:
      photos-output-path: ./uploads